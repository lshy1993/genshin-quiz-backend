openapi: 3.0.0
info:
  title: Genshin Quiz API
  description: API for Genshin Impact Quiz Application
  version: 1.0.0
  contact:
    name: API Support
    email: support@genshinquiz.com

servers:
  - url: http://localhost:8080/
    description: Development server
  - url: https://api.moelink.com/genshinquiz/
    description: Production server

paths:
  /users:
    get:
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /quizzes:
    get:
      summary: Get all quizzes
      operationId: getQuizzes
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          schema:
            type: string
            enum: [characters, weapons, artifacts, lore, gameplay]
        - name: difficulty
          in: query
          schema:
            type: string
            enum: [easy, medium, hard]
      responses:
        "200":
          description: List of quizzes
          content:
            application/json:
              schema:
                type: object
                properties:
                  quizzes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Quiz"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create a new quiz
      operationId: createQuiz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuizRequest"
      responses:
        "201":
          description: Quiz created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quiz"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /quizzes/{id}:
    get:
      summary: Get quiz by ID
      operationId: getQuiz
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Quiz details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quiz"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Update quiz
      operationId: updateQuiz
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuizRequest"
      responses:
        "200":
          description: Quiz updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quiz"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete quiz
      operationId: deleteQuiz
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Quiz deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "traveler123"
        email:
          type: string
          format: email
          example: "user@example.com"
        display_name:
          type: string
          example: "Traveler"
        avatar_url:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        total_score:
          type: integer
          example: 1250
        quizzes_completed:
          type: integer
          example: 15
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
      required:
        - id
        - username
        - email
        - created_at
        - updated_at

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "traveler123"
        email:
          type: string
          format: email
          example: "user@example.com"
        display_name:
          type: string
          maxLength: 100
          example: "Traveler"
        avatar_url:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
      required:
        - username
        - email

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "traveler123"
        email:
          type: string
          format: email
          example: "user@example.com"
        display_name:
          type: string
          maxLength: 100
          example: "Traveler"
        avatar_url:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"

    Quiz:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Genshin Characters Quiz"
        description:
          type: string
          example: "Test your knowledge about Genshin Impact characters"
        category:
          type: string
          enum: [characters, weapons, artifacts, lore, gameplay]
          example: "characters"
        difficulty:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
        time_limit:
          type: integer
          description: "Time limit in seconds"
          example: 300
        created_by:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
      required:
        - id
        - title
        - category
        - difficulty
        - questions
        - created_by
        - created_at
        - updated_at

    CreateQuizRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "Genshin Characters Quiz"
        description:
          type: string
          maxLength: 1000
          example: "Test your knowledge about Genshin Impact characters"
        category:
          type: string
          enum: [characters, weapons, artifacts, lore, gameplay]
          example: "characters"
        difficulty:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/CreateQuestionRequest"
          minItems: 1
        time_limit:
          type: integer
          minimum: 30
          maximum: 3600
          example: 300
        created_by:
          type: integer
          format: int64
          example: 1
      required:
        - title
        - category
        - difficulty
        - questions
        - created_by

    UpdateQuizRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "Genshin Characters Quiz"
        description:
          type: string
          maxLength: 1000
          example: "Test your knowledge about Genshin Impact characters"
        category:
          type: string
          enum: [characters, weapons, artifacts, lore, gameplay]
          example: "characters"
        difficulty:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/CreateQuestionRequest"
          minItems: 1
        time_limit:
          type: integer
          minimum: 30
          maximum: 3600
          example: 300

    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        question_text:
          type: string
          example: "Which character is the Anemo Archon?"
        question_type:
          type: string
          enum: [multiple_choice, true_false, fill_in_blank]
          example: "multiple_choice"
        options:
          type: array
          items:
            type: string
          example: ["Venti", "Zhongli", "Raiden Shogun", "Nahida"]
        correct_answer:
          type: string
          example: "Venti"
        explanation:
          type: string
          example: "Venti is the Anemo Archon, also known as Barbatos"
        points:
          type: integer
          example: 10
        order_index:
          type: integer
          example: 1
      required:
        - id
        - question_text
        - question_type
        - correct_answer
        - points
        - order_index

    CreateQuestionRequest:
      type: object
      properties:
        question_text:
          type: string
          minLength: 1
          maxLength: 500
          example: "Which character is the Anemo Archon?"
        question_type:
          type: string
          enum: [multiple_choice, true_false, fill_in_blank]
          example: "multiple_choice"
        options:
          type: array
          items:
            type: string
          example: ["Venti", "Zhongli", "Raiden Shogun", "Nahida"]
        correct_answer:
          type: string
          minLength: 1
          example: "Venti"
        explanation:
          type: string
          maxLength: 1000
          example: "Venti is the Anemo Archon, also known as Barbatos"
        points:
          type: integer
          minimum: 1
          maximum: 100
          example: 10
        order_index:
          type: integer
          minimum: 1
          example: 1
      required:
        - question_text
        - question_type
        - correct_answer
        - points
        - order_index

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Resource not found"
        message:
          type: string
          example: "The requested resource could not be found"
        code:
          type: integer
          example: 404
      required:
        - error
        - message
        - code

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
