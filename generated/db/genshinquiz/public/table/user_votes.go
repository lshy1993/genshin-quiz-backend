//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserVotes = newUserVotesTable("public", "user_votes", "")

type userVotesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	VoteID    postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	OptionID  postgres.ColumnInteger
	VoteCount postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserVotesTable struct {
	userVotesTable

	EXCLUDED userVotesTable
}

// AS creates new UserVotesTable with assigned alias
func (a UserVotesTable) AS(alias string) *UserVotesTable {
	return newUserVotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserVotesTable with assigned schema name
func (a UserVotesTable) FromSchema(schemaName string) *UserVotesTable {
	return newUserVotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserVotesTable with assigned table prefix
func (a UserVotesTable) WithPrefix(prefix string) *UserVotesTable {
	return newUserVotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserVotesTable with assigned table suffix
func (a UserVotesTable) WithSuffix(suffix string) *UserVotesTable {
	return newUserVotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserVotesTable(schemaName, tableName, alias string) *UserVotesTable {
	return &UserVotesTable{
		userVotesTable: newUserVotesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newUserVotesTableImpl("", "excluded", ""),
	}
}

func newUserVotesTableImpl(schemaName, tableName, alias string) userVotesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		VoteIDColumn    = postgres.IntegerColumn("vote_id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		OptionIDColumn  = postgres.IntegerColumn("option_id")
		VoteCountColumn = postgres.IntegerColumn("vote_count")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, VoteIDColumn, UserIDColumn, OptionIDColumn, VoteCountColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{VoteIDColumn, UserIDColumn, OptionIDColumn, VoteCountColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, VoteCountColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userVotesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		VoteID:    VoteIDColumn,
		UserID:    UserIDColumn,
		OptionID:  OptionIDColumn,
		VoteCount: VoteCountColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
