//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Quizzes = newQuizzesTable("public", "quizzes", "")

type quizzesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Category    postgres.ColumnString
	Difficulty  postgres.ColumnString
	TimeLimit   postgres.ColumnInteger
	CreatedBy   postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuizzesTable struct {
	quizzesTable

	EXCLUDED quizzesTable
}

// AS creates new QuizzesTable with assigned alias
func (a QuizzesTable) AS(alias string) *QuizzesTable {
	return newQuizzesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuizzesTable with assigned schema name
func (a QuizzesTable) FromSchema(schemaName string) *QuizzesTable {
	return newQuizzesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuizzesTable with assigned table prefix
func (a QuizzesTable) WithPrefix(prefix string) *QuizzesTable {
	return newQuizzesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuizzesTable with assigned table suffix
func (a QuizzesTable) WithSuffix(suffix string) *QuizzesTable {
	return newQuizzesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuizzesTable(schemaName, tableName, alias string) *QuizzesTable {
	return &QuizzesTable{
		quizzesTable: newQuizzesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newQuizzesTableImpl("", "excluded", ""),
	}
}

func newQuizzesTableImpl(schemaName, tableName, alias string) quizzesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CategoryColumn    = postgres.StringColumn("category")
		DifficultyColumn  = postgres.StringColumn("difficulty")
		TimeLimitColumn   = postgres.IntegerColumn("time_limit")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, TitleColumn, DescriptionColumn, CategoryColumn, DifficultyColumn, TimeLimitColumn, CreatedByColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{TitleColumn, DescriptionColumn, CategoryColumn, DifficultyColumn, TimeLimitColumn, CreatedByColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, TimeLimitColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return quizzesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Category:    CategoryColumn,
		Difficulty:  DifficultyColumn,
		TimeLimit:   TimeLimitColumn,
		CreatedBy:   CreatedByColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
