//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VoteOptions = newVoteOptionsTable("public", "vote_options", "")

type voteOptionsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	OptionUUID  postgres.ColumnString
	VoteID      postgres.ColumnInteger
	OptionText  postgres.ColumnString
	OptionOrder postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	VoteCount   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type VoteOptionsTable struct {
	voteOptionsTable

	EXCLUDED voteOptionsTable
}

// AS creates new VoteOptionsTable with assigned alias
func (a VoteOptionsTable) AS(alias string) *VoteOptionsTable {
	return newVoteOptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VoteOptionsTable with assigned schema name
func (a VoteOptionsTable) FromSchema(schemaName string) *VoteOptionsTable {
	return newVoteOptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VoteOptionsTable with assigned table prefix
func (a VoteOptionsTable) WithPrefix(prefix string) *VoteOptionsTable {
	return newVoteOptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VoteOptionsTable with assigned table suffix
func (a VoteOptionsTable) WithSuffix(suffix string) *VoteOptionsTable {
	return newVoteOptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVoteOptionsTable(schemaName, tableName, alias string) *VoteOptionsTable {
	return &VoteOptionsTable{
		voteOptionsTable: newVoteOptionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newVoteOptionsTableImpl("", "excluded", ""),
	}
}

func newVoteOptionsTableImpl(schemaName, tableName, alias string) voteOptionsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		OptionUUIDColumn  = postgres.StringColumn("option_uuid")
		VoteIDColumn      = postgres.IntegerColumn("vote_id")
		OptionTextColumn  = postgres.StringColumn("option_text")
		OptionOrderColumn = postgres.IntegerColumn("option_order")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		VoteCountColumn   = postgres.IntegerColumn("vote_count")
		allColumns        = postgres.ColumnList{IDColumn, OptionUUIDColumn, VoteIDColumn, OptionTextColumn, OptionOrderColumn, CreatedAtColumn, VoteCountColumn}
		mutableColumns    = postgres.ColumnList{OptionUUIDColumn, VoteIDColumn, OptionTextColumn, OptionOrderColumn, CreatedAtColumn, VoteCountColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, OptionUUIDColumn, OptionOrderColumn, CreatedAtColumn, VoteCountColumn}
	)

	return voteOptionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		OptionUUID:  OptionUUIDColumn,
		VoteID:      VoteIDColumn,
		OptionText:  OptionTextColumn,
		OptionOrder: OptionOrderColumn,
		CreatedAt:   CreatedAtColumn,
		VoteCount:   VoteCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
