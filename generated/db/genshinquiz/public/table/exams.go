//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Exams = newExamsTable("public", "exams", "")

type examsTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	ExamUUID            postgres.ColumnString
	Public              postgres.ColumnBool
	Difficulty          postgres.ColumnString
	TimeLimit           postgres.ColumnInteger
	AccessPassword      postgres.ColumnString
	CreatedBy           postgres.ColumnInteger
	CreatedAt           postgres.ColumnTimestampz
	UpdatedAt           postgres.ColumnTimestampz
	AttemptsCount       postgres.ColumnInteger
	TotalCorrectAnswers postgres.ColumnInteger
	HighestScore        postgres.ColumnInteger
	ShortestTime        postgres.ColumnInteger
	AverageScore        postgres.ColumnFloat
	PassRate            postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ExamsTable struct {
	examsTable

	EXCLUDED examsTable
}

// AS creates new ExamsTable with assigned alias
func (a ExamsTable) AS(alias string) *ExamsTable {
	return newExamsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExamsTable with assigned schema name
func (a ExamsTable) FromSchema(schemaName string) *ExamsTable {
	return newExamsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExamsTable with assigned table prefix
func (a ExamsTable) WithPrefix(prefix string) *ExamsTable {
	return newExamsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExamsTable with assigned table suffix
func (a ExamsTable) WithSuffix(suffix string) *ExamsTable {
	return newExamsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExamsTable(schemaName, tableName, alias string) *ExamsTable {
	return &ExamsTable{
		examsTable: newExamsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newExamsTableImpl("", "excluded", ""),
	}
}

func newExamsTableImpl(schemaName, tableName, alias string) examsTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		ExamUUIDColumn            = postgres.StringColumn("exam_uuid")
		PublicColumn              = postgres.BoolColumn("public")
		DifficultyColumn          = postgres.StringColumn("difficulty")
		TimeLimitColumn           = postgres.IntegerColumn("time_limit")
		AccessPasswordColumn      = postgres.StringColumn("access_password")
		CreatedByColumn           = postgres.IntegerColumn("created_by")
		CreatedAtColumn           = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn           = postgres.TimestampzColumn("updated_at")
		AttemptsCountColumn       = postgres.IntegerColumn("attempts_count")
		TotalCorrectAnswersColumn = postgres.IntegerColumn("total_correct_answers")
		HighestScoreColumn        = postgres.IntegerColumn("highest_score")
		ShortestTimeColumn        = postgres.IntegerColumn("shortest_time")
		AverageScoreColumn        = postgres.FloatColumn("average_score")
		PassRateColumn            = postgres.FloatColumn("pass_rate")
		allColumns                = postgres.ColumnList{IDColumn, ExamUUIDColumn, PublicColumn, DifficultyColumn, TimeLimitColumn, AccessPasswordColumn, CreatedByColumn, CreatedAtColumn, UpdatedAtColumn, AttemptsCountColumn, TotalCorrectAnswersColumn, HighestScoreColumn, ShortestTimeColumn, AverageScoreColumn, PassRateColumn}
		mutableColumns            = postgres.ColumnList{ExamUUIDColumn, PublicColumn, DifficultyColumn, TimeLimitColumn, AccessPasswordColumn, CreatedByColumn, CreatedAtColumn, UpdatedAtColumn, AttemptsCountColumn, TotalCorrectAnswersColumn, HighestScoreColumn, ShortestTimeColumn, AverageScoreColumn, PassRateColumn}
		defaultColumns            = postgres.ColumnList{IDColumn, ExamUUIDColumn, PublicColumn, CreatedAtColumn, UpdatedAtColumn, AttemptsCountColumn, TotalCorrectAnswersColumn, HighestScoreColumn, AverageScoreColumn, PassRateColumn}
	)

	return examsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		ExamUUID:            ExamUUIDColumn,
		Public:              PublicColumn,
		Difficulty:          DifficultyColumn,
		TimeLimit:           TimeLimitColumn,
		AccessPassword:      AccessPasswordColumn,
		CreatedBy:           CreatedByColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedAt:           UpdatedAtColumn,
		AttemptsCount:       AttemptsCountColumn,
		TotalCorrectAnswers: TotalCorrectAnswersColumn,
		HighestScore:        HighestScoreColumn,
		ShortestTime:        ShortestTimeColumn,
		AverageScore:        AverageScoreColumn,
		PassRate:            PassRateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
