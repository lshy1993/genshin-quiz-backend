//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VoteTranslations = newVoteTranslationsTable("public", "vote_translations", "")

type voteTranslationsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	VoteID      postgres.ColumnInteger
	Language    postgres.ColumnString
	Title       postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type VoteTranslationsTable struct {
	voteTranslationsTable

	EXCLUDED voteTranslationsTable
}

// AS creates new VoteTranslationsTable with assigned alias
func (a VoteTranslationsTable) AS(alias string) *VoteTranslationsTable {
	return newVoteTranslationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VoteTranslationsTable with assigned schema name
func (a VoteTranslationsTable) FromSchema(schemaName string) *VoteTranslationsTable {
	return newVoteTranslationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VoteTranslationsTable with assigned table prefix
func (a VoteTranslationsTable) WithPrefix(prefix string) *VoteTranslationsTable {
	return newVoteTranslationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VoteTranslationsTable with assigned table suffix
func (a VoteTranslationsTable) WithSuffix(suffix string) *VoteTranslationsTable {
	return newVoteTranslationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVoteTranslationsTable(schemaName, tableName, alias string) *VoteTranslationsTable {
	return &VoteTranslationsTable{
		voteTranslationsTable: newVoteTranslationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newVoteTranslationsTableImpl("", "excluded", ""),
	}
}

func newVoteTranslationsTableImpl(schemaName, tableName, alias string) voteTranslationsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		VoteIDColumn      = postgres.IntegerColumn("vote_id")
		LanguageColumn    = postgres.StringColumn("language")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, VoteIDColumn, LanguageColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{VoteIDColumn, LanguageColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return voteTranslationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		VoteID:      VoteIDColumn,
		Language:    LanguageColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
