//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var QuestionTranslations = newQuestionTranslationsTable("public", "question_translations", "")

type questionTranslationsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	QuestionID   postgres.ColumnInteger
	Language     postgres.ColumnString
	QuestionText postgres.ColumnString
	Description  postgres.ColumnString
	Explanation  postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuestionTranslationsTable struct {
	questionTranslationsTable

	EXCLUDED questionTranslationsTable
}

// AS creates new QuestionTranslationsTable with assigned alias
func (a QuestionTranslationsTable) AS(alias string) *QuestionTranslationsTable {
	return newQuestionTranslationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionTranslationsTable with assigned schema name
func (a QuestionTranslationsTable) FromSchema(schemaName string) *QuestionTranslationsTable {
	return newQuestionTranslationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionTranslationsTable with assigned table prefix
func (a QuestionTranslationsTable) WithPrefix(prefix string) *QuestionTranslationsTable {
	return newQuestionTranslationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionTranslationsTable with assigned table suffix
func (a QuestionTranslationsTable) WithSuffix(suffix string) *QuestionTranslationsTable {
	return newQuestionTranslationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionTranslationsTable(schemaName, tableName, alias string) *QuestionTranslationsTable {
	return &QuestionTranslationsTable{
		questionTranslationsTable: newQuestionTranslationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newQuestionTranslationsTableImpl("", "excluded", ""),
	}
}

func newQuestionTranslationsTableImpl(schemaName, tableName, alias string) questionTranslationsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		QuestionIDColumn   = postgres.IntegerColumn("question_id")
		LanguageColumn     = postgres.StringColumn("language")
		QuestionTextColumn = postgres.StringColumn("question_text")
		DescriptionColumn  = postgres.StringColumn("description")
		ExplanationColumn  = postgres.StringColumn("explanation")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, QuestionIDColumn, LanguageColumn, QuestionTextColumn, DescriptionColumn, ExplanationColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{QuestionIDColumn, LanguageColumn, QuestionTextColumn, DescriptionColumn, ExplanationColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns     = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return questionTranslationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		QuestionID:   QuestionIDColumn,
		Language:     LanguageColumn,
		QuestionText: QuestionTextColumn,
		Description:  DescriptionColumn,
		Explanation:  ExplanationColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
