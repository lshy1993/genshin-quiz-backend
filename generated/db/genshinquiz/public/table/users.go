//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	UserUUID    postgres.ColumnString
	Email       postgres.ColumnString
	DisplayName postgres.ColumnString
	AvatarURL   postgres.ColumnString
	Location    postgres.ColumnString
	Timezone    postgres.ColumnString
	Language    postgres.ColumnString
	ShowEmail   postgres.ColumnBool
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UserUUIDColumn    = postgres.StringColumn("user_uuid")
		EmailColumn       = postgres.StringColumn("email")
		DisplayNameColumn = postgres.StringColumn("display_name")
		AvatarURLColumn   = postgres.StringColumn("avatar_url")
		LocationColumn    = postgres.StringColumn("location")
		TimezoneColumn    = postgres.StringColumn("timezone")
		LanguageColumn    = postgres.StringColumn("language")
		ShowEmailColumn   = postgres.BoolColumn("show_email")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, UserUUIDColumn, EmailColumn, DisplayNameColumn, AvatarURLColumn, LocationColumn, TimezoneColumn, LanguageColumn, ShowEmailColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserUUIDColumn, EmailColumn, DisplayNameColumn, AvatarURLColumn, LocationColumn, TimezoneColumn, LanguageColumn, ShowEmailColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, UserUUIDColumn, LanguageColumn, ShowEmailColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserUUID:    UserUUIDColumn,
		Email:       EmailColumn,
		DisplayName: DisplayNameColumn,
		AvatarURL:   AvatarURLColumn,
		Location:    LocationColumn,
		Timezone:    TimezoneColumn,
		Language:    LanguageColumn,
		ShowEmail:   ShowEmailColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
