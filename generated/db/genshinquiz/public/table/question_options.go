//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var QuestionOptions = newQuestionOptionsTable("public", "question_options", "")

type questionOptionsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	OptionUUID    postgres.ColumnString
	QuestionID    postgres.ColumnInteger
	OptionType    postgres.ColumnString
	ImgURL        postgres.ColumnString
	IsAnswered    postgres.ColumnBool
	CreatedAt     postgres.ColumnTimestampz
	SelectedCount postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuestionOptionsTable struct {
	questionOptionsTable

	EXCLUDED questionOptionsTable
}

// AS creates new QuestionOptionsTable with assigned alias
func (a QuestionOptionsTable) AS(alias string) *QuestionOptionsTable {
	return newQuestionOptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionOptionsTable with assigned schema name
func (a QuestionOptionsTable) FromSchema(schemaName string) *QuestionOptionsTable {
	return newQuestionOptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionOptionsTable with assigned table prefix
func (a QuestionOptionsTable) WithPrefix(prefix string) *QuestionOptionsTable {
	return newQuestionOptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionOptionsTable with assigned table suffix
func (a QuestionOptionsTable) WithSuffix(suffix string) *QuestionOptionsTable {
	return newQuestionOptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionOptionsTable(schemaName, tableName, alias string) *QuestionOptionsTable {
	return &QuestionOptionsTable{
		questionOptionsTable: newQuestionOptionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newQuestionOptionsTableImpl("", "excluded", ""),
	}
}

func newQuestionOptionsTableImpl(schemaName, tableName, alias string) questionOptionsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		OptionUUIDColumn    = postgres.StringColumn("option_uuid")
		QuestionIDColumn    = postgres.IntegerColumn("question_id")
		OptionTypeColumn    = postgres.StringColumn("option_type")
		ImgURLColumn        = postgres.StringColumn("img_url")
		IsAnsweredColumn    = postgres.BoolColumn("is_answered")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		SelectedCountColumn = postgres.IntegerColumn("selected_count")
		allColumns          = postgres.ColumnList{IDColumn, OptionUUIDColumn, QuestionIDColumn, OptionTypeColumn, ImgURLColumn, IsAnsweredColumn, CreatedAtColumn, SelectedCountColumn}
		mutableColumns      = postgres.ColumnList{OptionUUIDColumn, QuestionIDColumn, OptionTypeColumn, ImgURLColumn, IsAnsweredColumn, CreatedAtColumn, SelectedCountColumn}
		defaultColumns      = postgres.ColumnList{IDColumn, OptionUUIDColumn, OptionTypeColumn, IsAnsweredColumn, CreatedAtColumn, SelectedCountColumn}
	)

	return questionOptionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		OptionUUID:    OptionUUIDColumn,
		QuestionID:    QuestionIDColumn,
		OptionType:    OptionTypeColumn,
		ImgURL:        ImgURLColumn,
		IsAnswered:    IsAnsweredColumn,
		CreatedAt:     CreatedAtColumn,
		SelectedCount: SelectedCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
