//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExamAnswers = newExamAnswersTable("public", "exam_answers", "")

type examAnswersTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	AttemptID         postgres.ColumnInteger
	QuestionID        postgres.ColumnInteger
	SelectedOptionIds postgres.ColumnString
	TimeTaken         postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ExamAnswersTable struct {
	examAnswersTable

	EXCLUDED examAnswersTable
}

// AS creates new ExamAnswersTable with assigned alias
func (a ExamAnswersTable) AS(alias string) *ExamAnswersTable {
	return newExamAnswersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExamAnswersTable with assigned schema name
func (a ExamAnswersTable) FromSchema(schemaName string) *ExamAnswersTable {
	return newExamAnswersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExamAnswersTable with assigned table prefix
func (a ExamAnswersTable) WithPrefix(prefix string) *ExamAnswersTable {
	return newExamAnswersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExamAnswersTable with assigned table suffix
func (a ExamAnswersTable) WithSuffix(suffix string) *ExamAnswersTable {
	return newExamAnswersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExamAnswersTable(schemaName, tableName, alias string) *ExamAnswersTable {
	return &ExamAnswersTable{
		examAnswersTable: newExamAnswersTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newExamAnswersTableImpl("", "excluded", ""),
	}
}

func newExamAnswersTableImpl(schemaName, tableName, alias string) examAnswersTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		AttemptIDColumn         = postgres.IntegerColumn("attempt_id")
		QuestionIDColumn        = postgres.IntegerColumn("question_id")
		SelectedOptionIdsColumn = postgres.StringColumn("selected_option_ids")
		TimeTakenColumn         = postgres.IntegerColumn("time_taken")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		allColumns              = postgres.ColumnList{IDColumn, AttemptIDColumn, QuestionIDColumn, SelectedOptionIdsColumn, TimeTakenColumn, CreatedAtColumn}
		mutableColumns          = postgres.ColumnList{AttemptIDColumn, QuestionIDColumn, SelectedOptionIdsColumn, TimeTakenColumn, CreatedAtColumn}
		defaultColumns          = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return examAnswersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		AttemptID:         AttemptIDColumn,
		QuestionID:        QuestionIDColumn,
		SelectedOptionIds: SelectedOptionIdsColumn,
		TimeTaken:         TimeTakenColumn,
		CreatedAt:         CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
