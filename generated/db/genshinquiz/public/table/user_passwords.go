//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserPasswords = newUserPasswordsTable("public", "user_passwords", "")

type userPasswordsTable struct {
	postgres.Table

	// Columns
	ID                     postgres.ColumnInteger
	UserID                 postgres.ColumnInteger
	PasswordHash           postgres.ColumnString
	PasswordResetToken     postgres.ColumnString
	PasswordResetExpiresAt postgres.ColumnTimestampz
	CreatedAt              postgres.ColumnTimestampz
	UpdatedAt              postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserPasswordsTable struct {
	userPasswordsTable

	EXCLUDED userPasswordsTable
}

// AS creates new UserPasswordsTable with assigned alias
func (a UserPasswordsTable) AS(alias string) *UserPasswordsTable {
	return newUserPasswordsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserPasswordsTable with assigned schema name
func (a UserPasswordsTable) FromSchema(schemaName string) *UserPasswordsTable {
	return newUserPasswordsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserPasswordsTable with assigned table prefix
func (a UserPasswordsTable) WithPrefix(prefix string) *UserPasswordsTable {
	return newUserPasswordsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserPasswordsTable with assigned table suffix
func (a UserPasswordsTable) WithSuffix(suffix string) *UserPasswordsTable {
	return newUserPasswordsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserPasswordsTable(schemaName, tableName, alias string) *UserPasswordsTable {
	return &UserPasswordsTable{
		userPasswordsTable: newUserPasswordsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserPasswordsTableImpl("", "excluded", ""),
	}
}

func newUserPasswordsTableImpl(schemaName, tableName, alias string) userPasswordsTable {
	var (
		IDColumn                     = postgres.IntegerColumn("id")
		UserIDColumn                 = postgres.IntegerColumn("user_id")
		PasswordHashColumn           = postgres.StringColumn("password_hash")
		PasswordResetTokenColumn     = postgres.StringColumn("password_reset_token")
		PasswordResetExpiresAtColumn = postgres.TimestampzColumn("password_reset_expires_at")
		CreatedAtColumn              = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn              = postgres.TimestampzColumn("updated_at")
		allColumns                   = postgres.ColumnList{IDColumn, UserIDColumn, PasswordHashColumn, PasswordResetTokenColumn, PasswordResetExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns               = postgres.ColumnList{UserIDColumn, PasswordHashColumn, PasswordResetTokenColumn, PasswordResetExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns               = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userPasswordsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                     IDColumn,
		UserID:                 UserIDColumn,
		PasswordHash:           PasswordHashColumn,
		PasswordResetToken:     PasswordResetTokenColumn,
		PasswordResetExpiresAt: PasswordResetExpiresAtColumn,
		CreatedAt:              CreatedAtColumn,
		UpdatedAt:              UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
