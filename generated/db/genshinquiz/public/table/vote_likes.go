//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VoteLikes = newVoteLikesTable("public", "vote_likes", "")

type voteLikesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	VoteID    postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	Value     postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type VoteLikesTable struct {
	voteLikesTable

	EXCLUDED voteLikesTable
}

// AS creates new VoteLikesTable with assigned alias
func (a VoteLikesTable) AS(alias string) *VoteLikesTable {
	return newVoteLikesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VoteLikesTable with assigned schema name
func (a VoteLikesTable) FromSchema(schemaName string) *VoteLikesTable {
	return newVoteLikesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VoteLikesTable with assigned table prefix
func (a VoteLikesTable) WithPrefix(prefix string) *VoteLikesTable {
	return newVoteLikesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VoteLikesTable with assigned table suffix
func (a VoteLikesTable) WithSuffix(suffix string) *VoteLikesTable {
	return newVoteLikesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVoteLikesTable(schemaName, tableName, alias string) *VoteLikesTable {
	return &VoteLikesTable{
		voteLikesTable: newVoteLikesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newVoteLikesTableImpl("", "excluded", ""),
	}
}

func newVoteLikesTableImpl(schemaName, tableName, alias string) voteLikesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		VoteIDColumn    = postgres.IntegerColumn("vote_id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		ValueColumn     = postgres.IntegerColumn("value")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, VoteIDColumn, UserIDColumn, ValueColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{VoteIDColumn, UserIDColumn, ValueColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return voteLikesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		VoteID:    VoteIDColumn,
		UserID:    UserIDColumn,
		Value:     ValueColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
