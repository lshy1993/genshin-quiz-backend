//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var QuestionComments = newQuestionCommentsTable("public", "question_comments", "")

type questionCommentsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	QuestionID postgres.ColumnInteger
	UserID     postgres.ColumnInteger
	Comment    postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuestionCommentsTable struct {
	questionCommentsTable

	EXCLUDED questionCommentsTable
}

// AS creates new QuestionCommentsTable with assigned alias
func (a QuestionCommentsTable) AS(alias string) *QuestionCommentsTable {
	return newQuestionCommentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionCommentsTable with assigned schema name
func (a QuestionCommentsTable) FromSchema(schemaName string) *QuestionCommentsTable {
	return newQuestionCommentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionCommentsTable with assigned table prefix
func (a QuestionCommentsTable) WithPrefix(prefix string) *QuestionCommentsTable {
	return newQuestionCommentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionCommentsTable with assigned table suffix
func (a QuestionCommentsTable) WithSuffix(suffix string) *QuestionCommentsTable {
	return newQuestionCommentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionCommentsTable(schemaName, tableName, alias string) *QuestionCommentsTable {
	return &QuestionCommentsTable{
		questionCommentsTable: newQuestionCommentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newQuestionCommentsTableImpl("", "excluded", ""),
	}
}

func newQuestionCommentsTableImpl(schemaName, tableName, alias string) questionCommentsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		QuestionIDColumn = postgres.IntegerColumn("question_id")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		CommentColumn    = postgres.StringColumn("comment")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, QuestionIDColumn, UserIDColumn, CommentColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{QuestionIDColumn, UserIDColumn, CommentColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns   = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return questionCommentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		QuestionID: QuestionIDColumn,
		UserID:     UserIDColumn,
		Comment:    CommentColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
