//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var QuestionSubmissions = newQuestionSubmissionsTable("public", "question_submissions", "")

type questionSubmissionsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	SubmissionUUID postgres.ColumnString
	QuestionID     postgres.ColumnInteger
	UserID         postgres.ColumnInteger
	IsCorrect      postgres.ColumnBool
	IsPractice     postgres.ColumnBool
	TimeTaken      postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuestionSubmissionsTable struct {
	questionSubmissionsTable

	EXCLUDED questionSubmissionsTable
}

// AS creates new QuestionSubmissionsTable with assigned alias
func (a QuestionSubmissionsTable) AS(alias string) *QuestionSubmissionsTable {
	return newQuestionSubmissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionSubmissionsTable with assigned schema name
func (a QuestionSubmissionsTable) FromSchema(schemaName string) *QuestionSubmissionsTable {
	return newQuestionSubmissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionSubmissionsTable with assigned table prefix
func (a QuestionSubmissionsTable) WithPrefix(prefix string) *QuestionSubmissionsTable {
	return newQuestionSubmissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionSubmissionsTable with assigned table suffix
func (a QuestionSubmissionsTable) WithSuffix(suffix string) *QuestionSubmissionsTable {
	return newQuestionSubmissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionSubmissionsTable(schemaName, tableName, alias string) *QuestionSubmissionsTable {
	return &QuestionSubmissionsTable{
		questionSubmissionsTable: newQuestionSubmissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newQuestionSubmissionsTableImpl("", "excluded", ""),
	}
}

func newQuestionSubmissionsTableImpl(schemaName, tableName, alias string) questionSubmissionsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		SubmissionUUIDColumn = postgres.StringColumn("submission_uuid")
		QuestionIDColumn     = postgres.IntegerColumn("question_id")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		IsCorrectColumn      = postgres.BoolColumn("is_correct")
		IsPracticeColumn     = postgres.BoolColumn("is_practice")
		TimeTakenColumn      = postgres.IntegerColumn("time_taken")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		allColumns           = postgres.ColumnList{IDColumn, SubmissionUUIDColumn, QuestionIDColumn, UserIDColumn, IsCorrectColumn, IsPracticeColumn, TimeTakenColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{SubmissionUUIDColumn, QuestionIDColumn, UserIDColumn, IsCorrectColumn, IsPracticeColumn, TimeTakenColumn, CreatedAtColumn}
		defaultColumns       = postgres.ColumnList{IDColumn, SubmissionUUIDColumn, IsCorrectColumn, IsPracticeColumn, CreatedAtColumn}
	)

	return questionSubmissionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		SubmissionUUID: SubmissionUUIDColumn,
		QuestionID:     QuestionIDColumn,
		UserID:         UserIDColumn,
		IsCorrect:      IsCorrectColumn,
		IsPractice:     IsPracticeColumn,
		TimeTaken:      TimeTakenColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
