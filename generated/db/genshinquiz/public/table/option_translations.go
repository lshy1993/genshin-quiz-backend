//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OptionTranslations = newOptionTranslationsTable("public", "option_translations", "")

type optionTranslationsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	OptionID   postgres.ColumnInteger
	Language   postgres.ColumnString
	OptionText postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type OptionTranslationsTable struct {
	optionTranslationsTable

	EXCLUDED optionTranslationsTable
}

// AS creates new OptionTranslationsTable with assigned alias
func (a OptionTranslationsTable) AS(alias string) *OptionTranslationsTable {
	return newOptionTranslationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OptionTranslationsTable with assigned schema name
func (a OptionTranslationsTable) FromSchema(schemaName string) *OptionTranslationsTable {
	return newOptionTranslationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OptionTranslationsTable with assigned table prefix
func (a OptionTranslationsTable) WithPrefix(prefix string) *OptionTranslationsTable {
	return newOptionTranslationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OptionTranslationsTable with assigned table suffix
func (a OptionTranslationsTable) WithSuffix(suffix string) *OptionTranslationsTable {
	return newOptionTranslationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOptionTranslationsTable(schemaName, tableName, alias string) *OptionTranslationsTable {
	return &OptionTranslationsTable{
		optionTranslationsTable: newOptionTranslationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newOptionTranslationsTableImpl("", "excluded", ""),
	}
}

func newOptionTranslationsTableImpl(schemaName, tableName, alias string) optionTranslationsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		OptionIDColumn   = postgres.IntegerColumn("option_id")
		LanguageColumn   = postgres.StringColumn("language")
		OptionTextColumn = postgres.StringColumn("option_text")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, OptionIDColumn, LanguageColumn, OptionTextColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{OptionIDColumn, LanguageColumn, OptionTextColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns   = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return optionTranslationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		OptionID:   OptionIDColumn,
		Language:   LanguageColumn,
		OptionText: OptionTextColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
