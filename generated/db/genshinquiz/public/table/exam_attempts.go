//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExamAttempts = newExamAttemptsTable("public", "exam_attempts", "")

type examAttemptsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	AttemptUUID postgres.ColumnString
	ExamID      postgres.ColumnInteger
	UserID      postgres.ColumnInteger
	TimeTaken   postgres.ColumnInteger
	TotalScore  postgres.ColumnInteger
	MaxScore    postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ExamAttemptsTable struct {
	examAttemptsTable

	EXCLUDED examAttemptsTable
}

// AS creates new ExamAttemptsTable with assigned alias
func (a ExamAttemptsTable) AS(alias string) *ExamAttemptsTable {
	return newExamAttemptsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExamAttemptsTable with assigned schema name
func (a ExamAttemptsTable) FromSchema(schemaName string) *ExamAttemptsTable {
	return newExamAttemptsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExamAttemptsTable with assigned table prefix
func (a ExamAttemptsTable) WithPrefix(prefix string) *ExamAttemptsTable {
	return newExamAttemptsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExamAttemptsTable with assigned table suffix
func (a ExamAttemptsTable) WithSuffix(suffix string) *ExamAttemptsTable {
	return newExamAttemptsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExamAttemptsTable(schemaName, tableName, alias string) *ExamAttemptsTable {
	return &ExamAttemptsTable{
		examAttemptsTable: newExamAttemptsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newExamAttemptsTableImpl("", "excluded", ""),
	}
}

func newExamAttemptsTableImpl(schemaName, tableName, alias string) examAttemptsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		AttemptUUIDColumn = postgres.StringColumn("attempt_uuid")
		ExamIDColumn      = postgres.IntegerColumn("exam_id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		TimeTakenColumn   = postgres.IntegerColumn("time_taken")
		TotalScoreColumn  = postgres.IntegerColumn("total_score")
		MaxScoreColumn    = postgres.IntegerColumn("max_score")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		allColumns        = postgres.ColumnList{IDColumn, AttemptUUIDColumn, ExamIDColumn, UserIDColumn, TimeTakenColumn, TotalScoreColumn, MaxScoreColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{AttemptUUIDColumn, ExamIDColumn, UserIDColumn, TimeTakenColumn, TotalScoreColumn, MaxScoreColumn, CreatedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, AttemptUUIDColumn, TotalScoreColumn, MaxScoreColumn, CreatedAtColumn}
	)

	return examAttemptsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AttemptUUID: AttemptUUIDColumn,
		ExamID:      ExamIDColumn,
		UserID:      UserIDColumn,
		TimeTaken:   TimeTakenColumn,
		TotalScore:  TotalScoreColumn,
		MaxScore:    MaxScoreColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
