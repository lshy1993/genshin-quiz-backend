//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Questions = newQuestionsTable("public", "questions", "")

type questionsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	QuestionUUID postgres.ColumnString
	Public       postgres.ColumnBool
	QuestionType postgres.ColumnString
	Category     postgres.ColumnString
	Difficulty   postgres.ColumnString
	IsPublished  postgres.ColumnBool
	PublishedAt  postgres.ColumnTimestampz
	CreatedAt    postgres.ColumnTimestampz
	SubmitCount  postgres.ColumnInteger
	CorrectCount postgres.ColumnInteger
	Likes        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuestionsTable struct {
	questionsTable

	EXCLUDED questionsTable
}

// AS creates new QuestionsTable with assigned alias
func (a QuestionsTable) AS(alias string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionsTable with assigned schema name
func (a QuestionsTable) FromSchema(schemaName string) *QuestionsTable {
	return newQuestionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionsTable with assigned table prefix
func (a QuestionsTable) WithPrefix(prefix string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionsTable with assigned table suffix
func (a QuestionsTable) WithSuffix(suffix string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionsTable(schemaName, tableName, alias string) *QuestionsTable {
	return &QuestionsTable{
		questionsTable: newQuestionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newQuestionsTableImpl("", "excluded", ""),
	}
}

func newQuestionsTableImpl(schemaName, tableName, alias string) questionsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		QuestionUUIDColumn = postgres.StringColumn("question_uuid")
		PublicColumn       = postgres.BoolColumn("public")
		QuestionTypeColumn = postgres.StringColumn("question_type")
		CategoryColumn     = postgres.StringColumn("category")
		DifficultyColumn   = postgres.StringColumn("difficulty")
		IsPublishedColumn  = postgres.BoolColumn("is_published")
		PublishedAtColumn  = postgres.TimestampzColumn("published_at")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		SubmitCountColumn  = postgres.IntegerColumn("submit_count")
		CorrectCountColumn = postgres.IntegerColumn("correct_count")
		LikesColumn        = postgres.IntegerColumn("likes")
		allColumns         = postgres.ColumnList{IDColumn, QuestionUUIDColumn, PublicColumn, QuestionTypeColumn, CategoryColumn, DifficultyColumn, IsPublishedColumn, PublishedAtColumn, CreatedAtColumn, SubmitCountColumn, CorrectCountColumn, LikesColumn}
		mutableColumns     = postgres.ColumnList{QuestionUUIDColumn, PublicColumn, QuestionTypeColumn, CategoryColumn, DifficultyColumn, IsPublishedColumn, PublishedAtColumn, CreatedAtColumn, SubmitCountColumn, CorrectCountColumn, LikesColumn}
		defaultColumns     = postgres.ColumnList{IDColumn, QuestionUUIDColumn, PublicColumn, IsPublishedColumn, CreatedAtColumn, SubmitCountColumn, CorrectCountColumn, LikesColumn}
	)

	return questionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		QuestionUUID: QuestionUUIDColumn,
		Public:       PublicColumn,
		QuestionType: QuestionTypeColumn,
		Category:     CategoryColumn,
		Difficulty:   DifficultyColumn,
		IsPublished:  IsPublishedColumn,
		PublishedAt:  PublishedAtColumn,
		CreatedAt:    CreatedAtColumn,
		SubmitCount:  SubmitCountColumn,
		CorrectCount: CorrectCountColumn,
		Likes:        LikesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
