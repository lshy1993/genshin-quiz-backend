//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Questions = newQuestionsTable("public", "questions", "")

type questionsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	QuizID        postgres.ColumnInteger
	QuestionText  postgres.ColumnString
	QuestionType  postgres.ColumnString
	Options       postgres.ColumnString
	CorrectAnswer postgres.ColumnString
	Explanation   postgres.ColumnString
	Points        postgres.ColumnInteger
	OrderIndex    postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuestionsTable struct {
	questionsTable

	EXCLUDED questionsTable
}

// AS creates new QuestionsTable with assigned alias
func (a QuestionsTable) AS(alias string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuestionsTable with assigned schema name
func (a QuestionsTable) FromSchema(schemaName string) *QuestionsTable {
	return newQuestionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuestionsTable with assigned table prefix
func (a QuestionsTable) WithPrefix(prefix string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuestionsTable with assigned table suffix
func (a QuestionsTable) WithSuffix(suffix string) *QuestionsTable {
	return newQuestionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuestionsTable(schemaName, tableName, alias string) *QuestionsTable {
	return &QuestionsTable{
		questionsTable: newQuestionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newQuestionsTableImpl("", "excluded", ""),
	}
}

func newQuestionsTableImpl(schemaName, tableName, alias string) questionsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		QuizIDColumn        = postgres.IntegerColumn("quiz_id")
		QuestionTextColumn  = postgres.StringColumn("question_text")
		QuestionTypeColumn  = postgres.StringColumn("question_type")
		OptionsColumn       = postgres.StringColumn("options")
		CorrectAnswerColumn = postgres.StringColumn("correct_answer")
		ExplanationColumn   = postgres.StringColumn("explanation")
		PointsColumn        = postgres.IntegerColumn("points")
		OrderIndexColumn    = postgres.IntegerColumn("order_index")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, QuizIDColumn, QuestionTextColumn, QuestionTypeColumn, OptionsColumn, CorrectAnswerColumn, ExplanationColumn, PointsColumn, OrderIndexColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{QuizIDColumn, QuestionTextColumn, QuestionTypeColumn, OptionsColumn, CorrectAnswerColumn, ExplanationColumn, PointsColumn, OrderIndexColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns      = postgres.ColumnList{IDColumn, PointsColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return questionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		QuizID:        QuizIDColumn,
		QuestionText:  QuestionTextColumn,
		QuestionType:  QuestionTypeColumn,
		Options:       OptionsColumn,
		CorrectAnswer: CorrectAnswerColumn,
		Explanation:   ExplanationColumn,
		Points:        PointsColumn,
		OrderIndex:    OrderIndexColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
