//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var QuizAttempts = newQuizAttemptsTable("public", "quiz_attempts", "")

type quizAttemptsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	UserID      postgres.ColumnInteger
	QuizID      postgres.ColumnInteger
	Score       postgres.ColumnInteger
	MaxScore    postgres.ColumnInteger
	TimeTaken   postgres.ColumnInteger
	CompletedAt postgres.ColumnTimestampz
	CreatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type QuizAttemptsTable struct {
	quizAttemptsTable

	EXCLUDED quizAttemptsTable
}

// AS creates new QuizAttemptsTable with assigned alias
func (a QuizAttemptsTable) AS(alias string) *QuizAttemptsTable {
	return newQuizAttemptsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QuizAttemptsTable with assigned schema name
func (a QuizAttemptsTable) FromSchema(schemaName string) *QuizAttemptsTable {
	return newQuizAttemptsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QuizAttemptsTable with assigned table prefix
func (a QuizAttemptsTable) WithPrefix(prefix string) *QuizAttemptsTable {
	return newQuizAttemptsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QuizAttemptsTable with assigned table suffix
func (a QuizAttemptsTable) WithSuffix(suffix string) *QuizAttemptsTable {
	return newQuizAttemptsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQuizAttemptsTable(schemaName, tableName, alias string) *QuizAttemptsTable {
	return &QuizAttemptsTable{
		quizAttemptsTable: newQuizAttemptsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newQuizAttemptsTableImpl("", "excluded", ""),
	}
}

func newQuizAttemptsTableImpl(schemaName, tableName, alias string) quizAttemptsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		QuizIDColumn      = postgres.IntegerColumn("quiz_id")
		ScoreColumn       = postgres.IntegerColumn("score")
		MaxScoreColumn    = postgres.IntegerColumn("max_score")
		TimeTakenColumn   = postgres.IntegerColumn("time_taken")
		CompletedAtColumn = postgres.TimestampzColumn("completed_at")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, QuizIDColumn, ScoreColumn, MaxScoreColumn, TimeTakenColumn, CompletedAtColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, QuizIDColumn, ScoreColumn, MaxScoreColumn, TimeTakenColumn, CompletedAtColumn, CreatedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, ScoreColumn, CompletedAtColumn, CreatedAtColumn}
	)

	return quizAttemptsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		QuizID:      QuizIDColumn,
		Score:       ScoreColumn,
		MaxScore:    MaxScoreColumn,
		TimeTaken:   TimeTakenColumn,
		CompletedAt: CompletedAtColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
