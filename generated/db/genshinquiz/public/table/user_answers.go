//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserAnswers = newUserAnswersTable("public", "user_answers", "")

type userAnswersTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	AttemptID    postgres.ColumnInteger
	QuestionID   postgres.ColumnInteger
	UserAnswer   postgres.ColumnString
	IsCorrect    postgres.ColumnBool
	PointsEarned postgres.ColumnInteger
	AnsweredAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserAnswersTable struct {
	userAnswersTable

	EXCLUDED userAnswersTable
}

// AS creates new UserAnswersTable with assigned alias
func (a UserAnswersTable) AS(alias string) *UserAnswersTable {
	return newUserAnswersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserAnswersTable with assigned schema name
func (a UserAnswersTable) FromSchema(schemaName string) *UserAnswersTable {
	return newUserAnswersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserAnswersTable with assigned table prefix
func (a UserAnswersTable) WithPrefix(prefix string) *UserAnswersTable {
	return newUserAnswersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserAnswersTable with assigned table suffix
func (a UserAnswersTable) WithSuffix(suffix string) *UserAnswersTable {
	return newUserAnswersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserAnswersTable(schemaName, tableName, alias string) *UserAnswersTable {
	return &UserAnswersTable{
		userAnswersTable: newUserAnswersTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserAnswersTableImpl("", "excluded", ""),
	}
}

func newUserAnswersTableImpl(schemaName, tableName, alias string) userAnswersTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		AttemptIDColumn    = postgres.IntegerColumn("attempt_id")
		QuestionIDColumn   = postgres.IntegerColumn("question_id")
		UserAnswerColumn   = postgres.StringColumn("user_answer")
		IsCorrectColumn    = postgres.BoolColumn("is_correct")
		PointsEarnedColumn = postgres.IntegerColumn("points_earned")
		AnsweredAtColumn   = postgres.TimestampzColumn("answered_at")
		allColumns         = postgres.ColumnList{IDColumn, AttemptIDColumn, QuestionIDColumn, UserAnswerColumn, IsCorrectColumn, PointsEarnedColumn, AnsweredAtColumn}
		mutableColumns     = postgres.ColumnList{AttemptIDColumn, QuestionIDColumn, UserAnswerColumn, IsCorrectColumn, PointsEarnedColumn, AnsweredAtColumn}
		defaultColumns     = postgres.ColumnList{IDColumn, IsCorrectColumn, PointsEarnedColumn, AnsweredAtColumn}
	)

	return userAnswersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		AttemptID:    AttemptIDColumn,
		QuestionID:   QuestionIDColumn,
		UserAnswer:   UserAnswerColumn,
		IsCorrect:    IsCorrectColumn,
		PointsEarned: PointsEarnedColumn,
		AnsweredAt:   AnsweredAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
