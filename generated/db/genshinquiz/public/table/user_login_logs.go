//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserLoginLogs = newUserLoginLogsTable("public", "user_login_logs", "")

type userLoginLogsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	IPAddress postgres.ColumnString
	LoginAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserLoginLogsTable struct {
	userLoginLogsTable

	EXCLUDED userLoginLogsTable
}

// AS creates new UserLoginLogsTable with assigned alias
func (a UserLoginLogsTable) AS(alias string) *UserLoginLogsTable {
	return newUserLoginLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserLoginLogsTable with assigned schema name
func (a UserLoginLogsTable) FromSchema(schemaName string) *UserLoginLogsTable {
	return newUserLoginLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserLoginLogsTable with assigned table prefix
func (a UserLoginLogsTable) WithPrefix(prefix string) *UserLoginLogsTable {
	return newUserLoginLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserLoginLogsTable with assigned table suffix
func (a UserLoginLogsTable) WithSuffix(suffix string) *UserLoginLogsTable {
	return newUserLoginLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserLoginLogsTable(schemaName, tableName, alias string) *UserLoginLogsTable {
	return &UserLoginLogsTable{
		userLoginLogsTable: newUserLoginLogsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserLoginLogsTableImpl("", "excluded", ""),
	}
}

func newUserLoginLogsTableImpl(schemaName, tableName, alias string) userLoginLogsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		IPAddressColumn = postgres.StringColumn("ip_address")
		LoginAtColumn   = postgres.TimestampzColumn("login_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, IPAddressColumn, LoginAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, IPAddressColumn, LoginAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, LoginAtColumn}
	)

	return userLoginLogsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		IPAddress: IPAddressColumn,
		LoginAt:   LoginAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
