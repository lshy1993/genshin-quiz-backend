//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Votes = newVotesTable("public", "votes", "")

type votesTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	VoteUUID          postgres.ColumnString
	Public            postgres.ColumnBool
	Category          postgres.ColumnString
	StartAt           postgres.ColumnTimestampz
	ExpiresAt         postgres.ColumnTimestampz
	VotesPerUser      postgres.ColumnInteger
	VotesPerOption    postgres.ColumnInteger
	CreatedBy         postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestampz
	ParticipantsCount postgres.ColumnInteger
	TotalVotesCount   postgres.ColumnInteger
	LikesCount        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type VotesTable struct {
	votesTable

	EXCLUDED votesTable
}

// AS creates new VotesTable with assigned alias
func (a VotesTable) AS(alias string) *VotesTable {
	return newVotesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VotesTable with assigned schema name
func (a VotesTable) FromSchema(schemaName string) *VotesTable {
	return newVotesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VotesTable with assigned table prefix
func (a VotesTable) WithPrefix(prefix string) *VotesTable {
	return newVotesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VotesTable with assigned table suffix
func (a VotesTable) WithSuffix(suffix string) *VotesTable {
	return newVotesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVotesTable(schemaName, tableName, alias string) *VotesTable {
	return &VotesTable{
		votesTable: newVotesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newVotesTableImpl("", "excluded", ""),
	}
}

func newVotesTableImpl(schemaName, tableName, alias string) votesTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		VoteUUIDColumn          = postgres.StringColumn("vote_uuid")
		PublicColumn            = postgres.BoolColumn("public")
		CategoryColumn          = postgres.StringColumn("category")
		StartAtColumn           = postgres.TimestampzColumn("start_at")
		ExpiresAtColumn         = postgres.TimestampzColumn("expires_at")
		VotesPerUserColumn      = postgres.IntegerColumn("votes_per_user")
		VotesPerOptionColumn    = postgres.IntegerColumn("votes_per_option")
		CreatedByColumn         = postgres.IntegerColumn("created_by")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		ParticipantsCountColumn = postgres.IntegerColumn("participants_count")
		TotalVotesCountColumn   = postgres.IntegerColumn("total_votes_count")
		LikesCountColumn        = postgres.IntegerColumn("likes_count")
		allColumns              = postgres.ColumnList{IDColumn, VoteUUIDColumn, PublicColumn, CategoryColumn, StartAtColumn, ExpiresAtColumn, VotesPerUserColumn, VotesPerOptionColumn, CreatedByColumn, CreatedAtColumn, ParticipantsCountColumn, TotalVotesCountColumn, LikesCountColumn}
		mutableColumns          = postgres.ColumnList{VoteUUIDColumn, PublicColumn, CategoryColumn, StartAtColumn, ExpiresAtColumn, VotesPerUserColumn, VotesPerOptionColumn, CreatedByColumn, CreatedAtColumn, ParticipantsCountColumn, TotalVotesCountColumn, LikesCountColumn}
		defaultColumns          = postgres.ColumnList{IDColumn, VoteUUIDColumn, PublicColumn, StartAtColumn, VotesPerUserColumn, VotesPerOptionColumn, CreatedAtColumn, ParticipantsCountColumn, TotalVotesCountColumn, LikesCountColumn}
	)

	return votesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		VoteUUID:          VoteUUIDColumn,
		Public:            PublicColumn,
		Category:          CategoryColumn,
		StartAt:           StartAtColumn,
		ExpiresAt:         ExpiresAtColumn,
		VotesPerUser:      VotesPerUserColumn,
		VotesPerOption:    VotesPerOptionColumn,
		CreatedBy:         CreatedByColumn,
		CreatedAt:         CreatedAtColumn,
		ParticipantsCount: ParticipantsCountColumn,
		TotalVotesCount:   TotalVotesCountColumn,
		LikesCount:        LikesCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
