//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExamQuestions = newExamQuestionsTable("public", "exam_questions", "")

type examQuestionsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	ExamID        postgres.ColumnInteger
	QuestionID    postgres.ColumnInteger
	QuestionOrder postgres.ColumnInteger
	Points        postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ExamQuestionsTable struct {
	examQuestionsTable

	EXCLUDED examQuestionsTable
}

// AS creates new ExamQuestionsTable with assigned alias
func (a ExamQuestionsTable) AS(alias string) *ExamQuestionsTable {
	return newExamQuestionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExamQuestionsTable with assigned schema name
func (a ExamQuestionsTable) FromSchema(schemaName string) *ExamQuestionsTable {
	return newExamQuestionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExamQuestionsTable with assigned table prefix
func (a ExamQuestionsTable) WithPrefix(prefix string) *ExamQuestionsTable {
	return newExamQuestionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExamQuestionsTable with assigned table suffix
func (a ExamQuestionsTable) WithSuffix(suffix string) *ExamQuestionsTable {
	return newExamQuestionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExamQuestionsTable(schemaName, tableName, alias string) *ExamQuestionsTable {
	return &ExamQuestionsTable{
		examQuestionsTable: newExamQuestionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newExamQuestionsTableImpl("", "excluded", ""),
	}
}

func newExamQuestionsTableImpl(schemaName, tableName, alias string) examQuestionsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		ExamIDColumn        = postgres.IntegerColumn("exam_id")
		QuestionIDColumn    = postgres.IntegerColumn("question_id")
		QuestionOrderColumn = postgres.IntegerColumn("question_order")
		PointsColumn        = postgres.IntegerColumn("points")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		allColumns          = postgres.ColumnList{IDColumn, ExamIDColumn, QuestionIDColumn, QuestionOrderColumn, PointsColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{ExamIDColumn, QuestionIDColumn, QuestionOrderColumn, PointsColumn, CreatedAtColumn}
		defaultColumns      = postgres.ColumnList{IDColumn, QuestionOrderColumn, PointsColumn, CreatedAtColumn}
	)

	return examQuestionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		ExamID:        ExamIDColumn,
		QuestionID:    QuestionIDColumn,
		QuestionOrder: QuestionOrderColumn,
		Points:        PointsColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
