//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type Category string

const (
	Category_Character  Category = "character"
	Category_Weapon     Category = "weapon"
	Category_Artifact   Category = "artifact"
	Category_Lore       Category = "lore"
	Category_Gameplay   Category = "gameplay"
	Category_World      Category = "world"
	Category_Combat     Category = "combat"
	Category_Music      Category = "music"
	Category_Statistics Category = "statistics"
	Category_Fun        Category = "fun"
	Category_Real       Category = "real"
	Category_Other      Category = "other"
)

var CategoryAllValues = []Category{
	Category_Character,
	Category_Weapon,
	Category_Artifact,
	Category_Lore,
	Category_Gameplay,
	Category_World,
	Category_Combat,
	Category_Music,
	Category_Statistics,
	Category_Fun,
	Category_Real,
	Category_Other,
}

func (e *Category) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "character":
		*e = Category_Character
	case "weapon":
		*e = Category_Weapon
	case "artifact":
		*e = Category_Artifact
	case "lore":
		*e = Category_Lore
	case "gameplay":
		*e = Category_Gameplay
	case "world":
		*e = Category_World
	case "combat":
		*e = Category_Combat
	case "music":
		*e = Category_Music
	case "statistics":
		*e = Category_Statistics
	case "fun":
		*e = Category_Fun
	case "real":
		*e = Category_Real
	case "other":
		*e = Category_Other
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for Category enum")
	}

	return nil
}

func (e Category) String() string {
	return string(e)
}
